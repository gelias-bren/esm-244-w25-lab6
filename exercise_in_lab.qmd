---
title: "Lab 6: Random Forest Exercise"
author: "Isa Elias"
format: 
  html:
    embed-resources: true
    code-fold: show
execute:
  message: false
  warning: false
---

```{r}

library(tidymodels)
library(tidyverse)
library(ggcorrplot)
library(knitr)
library(kableExtra)
library(ranger)
```

```{r}
energy_data_raw <- read_csv(here::here('data', 'Energy_consumption_dataset.csv'))|>
  janitor::clean_names()

energy_data_raw$month <- as.factor(energy_data_raw$month)
energy_data_raw$day_of_week <- as.factor(energy_data_raw$day_of_week)
energy_data_raw$hour <- as.factor(energy_data_raw$hour)


energy_data_raw %>% 
  select(where(is.numeric)) %>% 
  cor() %>% 
  ggcorrplot(
    method = "circle",
    type='upper',
    outline.col = "black",
  )

set.seed(123)

e_split <- initial_split(energy_data_raw, prop = 0.75)

e_train <- training(e_split)

e_test <- testing(e_split)

e_recipe <- recipe(energy_consumption ~ ., data = energy_data_raw) |> 
  step_zv(all_predictors()) |> 
  step_corr(all_numeric(), threshold = 0.9)


rf_spec <- rand_forest(trees = 1000, 
                       mtry = tune(),
                       min_n = tune()) |>
  set_engine("ranger") |>
  set_mode("regression")

rf_workflow <- workflow() |>
  add_recipe(e_recipe) |>
  add_model(rf_spec)

# Hyperparameter tuning
rf_grid= expand_grid(
  mtry = seq(1,6,by=2),
  min_n = 2
)

rf_res <- tune_grid(
  rf_workflow,
  resamples = vfold_cv(e_train, v = 5),
  grid = rf_grid,
  control=control_grid(save_workflow = TRUE)  # This is useful when finalizing the model
)


rf_res %>%
  collect_metrics() %>%
  filter(.metric == "rmse") %>%
  mutate(min_n = factor(min_n)) %>%
  ggplot(aes(mtry, mean, color = min_n)) +
  geom_line(alpha = 0.5, linewidth = 1.5) +
  geom_point() +
  labs(y = "RMSE")

rf_best<-select_best(rf_res,metric='rmse')


rf_final<-finalize_model(rf_spec,rf_best)

# finalize workflow

final_wf <- workflow() %>%
  add_recipe(e_recipe) %>%
  add_model(rf_final)

final_res <- final_wf %>%
  last_fit(e_split)

rf_final |>
  set_engine('ranger',importance='permutation') |> 
  fit(energy_consumption~.,
      data=juice(prep(e_recipe))) |> # juice 
  vip::vip(geom='point')


```
